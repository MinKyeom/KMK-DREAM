c언어의 switch문 기본 정의 좀 알려줘

물론입니다! C언어의 switch 문은 여러 개의 조건을 처리할 때 사용하는 선택문입니다. 보통 if-else if 문을 대체할 수 있으며, 값이 정수형이나 문자형일 때 사용됩니다.

🔹 기본 구조
switch (변수 또는 표현식) {
    case 값1:
        // 값1일 때 실행할 코드
        break;
    case 값2:
        // 값2일 때 실행할 코드
        break;
    ...
    default:
        // 위의 어떤 case와도 일치하지 않을 때 실행할 코드
}

🔹 설명

switch 안에는 변수나 표현식을 넣고, 그 값에 따라 일치하는 case 문을 찾아 실행합니다.

break 문은 해당 case 블록을 실행한 후 switch 문을 빠져나가도록 합니다.

default는 선택사항이며, 아무 case와도 일치하지 않을 때 실행됩니다.

case에 사용할 수 있는 값은 **상수(정수 또는 문자)**여야 합니다.

🔹 예제
#include <stdio.h>

int main() {
    int num = 2;

    switch (num) {
        case 1:
            printf("1입니다.\n");
            break;
        case 2:
            printf("2입니다.\n");
            break;
        case 3:
            printf("3입니다.\n");
            break;
        default:
            printf("1~3이 아닙니다.\n");
    }

    return 0;
}


🟢 출력:

2입니다.

switch문은 while이랑 for문 같은 반복문은 아니지 않아? 왜 break가 중간에 쓰여있어? 어짜피 한 번만 루프 돌면 끝이자나


아주 좋은 질문이에요. 정확히 말하면, switch 문은 반복문이 아닙니다. while, for 같은 루프는 반복을 위한 구조지만, switch는 조건에 따라 분기하는 선택 구조예요.

그런데도 왜 break를 쓰냐?
👉 그 이유는 switch 문 안에서 원하는 case만 실행하고 빠져나오기 위해서입니다.

🔹 왜 break가 필요한가?

C 언어의 switch 문은 해당하는 case부터 밑으로 쭉 실행되기 때문이에요. 이걸 **"fall-through (떨어져 내려간다)"**라고 합니다.

즉, break가 없으면 원치 않는 다른 case들까지 연달아 실행될 수 있어요.

🔸 예를 들어볼게요:
int num = 2;

switch (num) {
    case 1:
        printf("1입니다.\n");
    case 2:
        printf("2입니다.\n");
    case 3:
        printf("3입니다.\n");
    default:
        printf("기타입니다.\n");
}


🔴 이 코드의 출력은:

2입니다.
3입니다.
기타입니다.


왜냐면 num == 2 이니까 case 2:부터 시작해서 그 밑으로 모두 실행된 거예요.

🔸 그런데 break를 쓰면?
int num = 2;

switch (num) {
    case 1:
        printf("1입니다.\n");
        break;
    case 2:
        printf("2입니다.\n");
        break;
    case 3:
        printf("3입니다.\n");
        break;
    default:
        printf("기타입니다.\n");
}


✅ 출력:

2입니다.


이제 우리가 원하는 case만 실행되고, break 덕분에 switch 문을 빠져나간 거죠.

✅ 요약

switch는 반복문이 아님! → 한 번만 실행됨.

break는 필수는 아니지만 보통 꼭 씀 → 다음 case들로 쭉 떨어지지 않도록.

안 쓰면 fall-through 때문에 예상치 못한 출력이 나올 수 있음.

더 궁금한 점 있어요? break 없이 쓰는 상황(일부러 fall-through 쓰는 경우)도 설명해 드릴 수 있어요.

조건에 안맞는데 case2 실행 후 모두 실행된다고?

좋은 지적이에요! 헷갈릴 수 있는 부분인데, **핵심은 “일단 맞는 case를 찾으면, 그 아래로 break를 만날 때까지 전부 실행된다”**는 거예요.

🔸 요점 다시 정리:

switch는 먼저 case 조건을 검사함.

처음으로 일치하는 case를 찾으면, 그 위치부터 아래로 break를 만날 때까지 모든 코드를 실행함.

조건에 맞지 않는 다른 case들도 실행되는 것처럼 보일 수 있음, 그건 fall-through 때문.

🔹 예제와 설명
코드:
int num = 2;

switch (num) {
    case 1:
        printf("1입니다.\n");
    case 2:
        printf("2입니다.\n");
    case 3:
        printf("3입니다.\n");
    default:
        printf("기타입니다.\n");
}

실행 흐름:

num == 2 → case 2:와 일치함.

case 2: 부터 실행 시작.

break가 없으니 아래의 case 3:, default:까지 전부 실행됨.

출력 결과:
2입니다.
3입니다.
기타입니다.


✅ 조건에 안 맞는 case 3과 default도 실행된 게 아니라,
case 2부터 쭉 내려가면서 코드가 실행된 거예요.
(C 언어는 case들 사이에 if 같은 조건 검사를 다시 안 합니다)

🔸 그림으로 비유하자면:

switch는 case들을 층층이 쌓아놓은 건물이라고 보면,

일치하는 층(case)에 도달하면,

엘리베이터가 고장 나서 무조건 맨 아래층까지 내려감 😅

break는 엘리베이터 정지 버튼처럼 작동해서, 그 층에서 멈춰주게 함.

🔹 그래서 다시 답변 요약

"조건에 안 맞는데 case 2 이후가 실행된다고?"
→ 아니요, 조건이 맞는 case부터 실행되는 게 맞아요.
단지 break가 없으면 그 아래 있는 코드가 줄줄이 실행되는 거예요 — 조건 검사 없이.

